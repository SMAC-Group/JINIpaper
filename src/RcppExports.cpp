// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// em
Rcpp::List em(Eigen::VectorXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& theta, unsigned int maxit, double eps, bool verbose);
RcppExport SEXP _JINIpaper_em(SEXP ySEXP, SEXP xSEXP, SEXP thetaSEXP, SEXP maxitSEXP, SEXP epsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(em(y, x, theta, maxit, eps, verbose));
    return rcpp_result_gen;
END_RCPP
}
// logistic_misclassification_mle
Eigen::VectorXd logistic_misclassification_mle(Eigen::MatrixXd& x, Eigen::ArrayXd& y, double fp, double fn);
RcppExport SEXP _JINIpaper_logistic_misclassification_mle(SEXP xSEXP, SEXP ySEXP, SEXP fpSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type fp(fpSEXP);
    Rcpp::traits::input_parameter< double >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_misclassification_mle(x, y, fp, fn));
    return rcpp_result_gen;
END_RCPP
}
// inverse_FIM
Eigen::MatrixXd inverse_FIM(Eigen::MatrixXd& x, Eigen::VectorXd& beta, double fp, double fn);
RcppExport SEXP _JINIpaper_inverse_FIM(SEXP xSEXP, SEXP betaSEXP, SEXP fpSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type fp(fpSEXP);
    Rcpp::traits::input_parameter< double >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(inverse_FIM(x, beta, fp, fn));
    return rcpp_result_gen;
END_RCPP
}
// par_bootstrap_mle
Eigen::MatrixXd par_bootstrap_mle(Eigen::VectorXd& beta, Eigen::MatrixXd& x, unsigned int B, unsigned int seed, unsigned int ncores, double fp, double fn);
RcppExport SEXP _JINIpaper_par_bootstrap_mle(SEXP betaSEXP, SEXP xSEXP, SEXP BSEXP, SEXP seedSEXP, SEXP ncoresSEXP, SEXP fpSEXP, SEXP fnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type B(BSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< double >::type fp(fpSEXP);
    Rcpp::traits::input_parameter< double >::type fn(fnSEXP);
    rcpp_result_gen = Rcpp::wrap(par_bootstrap_mle(beta, x, B, seed, ncores, fp, fn));
    return rcpp_result_gen;
END_RCPP
}
// nll_max_beta
double nll_max_beta(const Eigen::VectorXd& beta, const double& alpha, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const double& lambda);
RcppExport SEXP _JINIpaper_nll_max_beta(SEXP betaSEXP, SEXP alphaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(nll_max_beta(beta, alpha, y, x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// nll_max_alpha
double nll_max_alpha(const double& alpha, const Eigen::VectorXd& beta, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const double& lambda);
RcppExport SEXP _JINIpaper_nll_max_alpha(SEXP alphaSEXP, SEXP betaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(nll_max_alpha(alpha, beta, y, x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// logLike_negbin
double logLike_negbin(const Eigen::VectorXd& beta, const double& alpha, const Eigen::VectorXd& y, const Eigen::MatrixXd& x, const double& lambda);
RcppExport SEXP _JINIpaper_logLike_negbin(SEXP betaSEXP, SEXP alphaSEXP, SEXP ySEXP, SEXP xSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(logLike_negbin(beta, alpha, y, x, lambda));
    return rcpp_result_gen;
END_RCPP
}
// paretoMle
Rcpp::List paretoMle(Eigen::ArrayXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& start, unsigned int maxit, double tol, bool verbose);
RcppExport SEXP _JINIpaper_paretoMle(SEXP ySEXP, SEXP xSEXP, SEXP startSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(paretoMle(y, x, start, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// paretoWmle1
Rcpp::List paretoWmle1(Eigen::ArrayXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& start, double c, unsigned int maxit, double tol, bool verbose);
RcppExport SEXP _JINIpaper_paretoWmle1(SEXP ySEXP, SEXP xSEXP, SEXP startSEXP, SEXP cSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(paretoWmle1(y, x, start, c, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// r_pareto
Eigen::ArrayXd r_pareto(Eigen::VectorXd& beta, double k, Eigen::MatrixXd& x, unsigned int seed);
RcppExport SEXP _JINIpaper_r_pareto(SEXP betaSEXP, SEXP kSEXP, SEXP xSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(r_pareto(beta, k, x, seed));
    return rcpp_result_gen;
END_RCPP
}
// roblogisticMqle1
Rcpp::List roblogisticMqle1(Eigen::ArrayXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& start, double c, unsigned int maxit, double tol, bool verbose);
RcppExport SEXP _JINIpaper_roblogisticMqle1(SEXP ySEXP, SEXP xSEXP, SEXP startSEXP, SEXP cSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(roblogisticMqle1(y, x, start, c, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// roblogisticMqle
Rcpp::List roblogisticMqle(Eigen::ArrayXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& start, double c, unsigned int maxit, double tol, bool verbose);
RcppExport SEXP _JINIpaper_roblogisticMqle(SEXP ySEXP, SEXP xSEXP, SEXP startSEXP, SEXP cSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(roblogisticMqle(y, x, start, c, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// roblogisticMqleVar
Rcpp::List roblogisticMqleVar(Eigen::MatrixXd& x, Eigen::VectorXd& start, double c);
RcppExport SEXP _JINIpaper_roblogisticMqleVar(SEXP xSEXP, SEXP startSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(roblogisticMqleVar(x, start, c));
    return rcpp_result_gen;
END_RCPP
}
// roblogisticWmle1
Rcpp::List roblogisticWmle1(Eigen::ArrayXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& start, double c, unsigned int maxit, double tol, bool verbose);
RcppExport SEXP _JINIpaper_roblogisticWmle1(SEXP ySEXP, SEXP xSEXP, SEXP startSEXP, SEXP cSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(roblogisticWmle1(y, x, start, c, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// roblogisticWmle
Rcpp::List roblogisticWmle(Eigen::ArrayXd& y, Eigen::MatrixXd& x, Eigen::VectorXd& start, double c, unsigned int maxit, double tol, bool verbose);
RcppExport SEXP _JINIpaper_roblogisticWmle(SEXP ySEXP, SEXP xSEXP, SEXP startSEXP, SEXP cSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(roblogisticWmle(y, x, start, c, maxit, tol, verbose));
    return rcpp_result_gen;
END_RCPP
}
// roblogisticWmleVar
Rcpp::List roblogisticWmleVar(Eigen::MatrixXd& x, Eigen::VectorXd& start, double c);
RcppExport SEXP _JINIpaper_roblogisticWmleVar(SEXP xSEXP, SEXP startSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(roblogisticWmleVar(x, start, c));
    return rcpp_result_gen;
END_RCPP
}
// r_logistic
Eigen::ArrayXd r_logistic(Eigen::VectorXd& beta, Eigen::MatrixXd& x, unsigned int seed);
RcppExport SEXP _JINIpaper_r_logistic(SEXP betaSEXP, SEXP xSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(r_logistic(beta, x, seed));
    return rcpp_result_gen;
END_RCPP
}
// IBroblogisticWmle1
Rcpp::List IBroblogisticWmle1(Eigen::MatrixXd& x, Eigen::VectorXd& start, double c, unsigned int H, unsigned int maxit, double tol, bool verbose, unsigned int seed);
RcppExport SEXP _JINIpaper_IBroblogisticWmle1(SEXP xSEXP, SEXP startSEXP, SEXP cSEXP, SEXP HSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type H(HSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(IBroblogisticWmle1(x, start, c, H, maxit, tol, verbose, seed));
    return rcpp_result_gen;
END_RCPP
}
// StocApproblogisticWmle1
Rcpp::List StocApproblogisticWmle1(Eigen::MatrixXd& x, Eigen::VectorXd& start, double c, unsigned int maxit, double tol, bool verbose, unsigned int seed, double k);
RcppExport SEXP _JINIpaper_StocApproblogisticWmle1(SEXP xSEXP, SEXP startSEXP, SEXP cSEXP, SEXP maxitSEXP, SEXP tolSEXP, SEXP verboseSEXP, SEXP seedSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type start(startSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(StocApproblogisticWmle1(x, start, c, maxit, tol, verbose, seed, k));
    return rcpp_result_gen;
END_RCPP
}
// logistic_wmle
Rcpp::List logistic_wmle(Eigen::ArrayXd& y, Eigen::MatrixXd& x, double c);
RcppExport SEXP _JINIpaper_logistic_wmle(SEXP ySEXP, SEXP xSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_wmle(y, x, c));
    return rcpp_result_gen;
END_RCPP
}
// logistic_mqle
Rcpp::List logistic_mqle(Eigen::ArrayXd& y, Eigen::MatrixXd& x, double c);
RcppExport SEXP _JINIpaper_logistic_mqle(SEXP ySEXP, SEXP xSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(logistic_mqle(y, x, c));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_JINIpaper_em", (DL_FUNC) &_JINIpaper_em, 6},
    {"_JINIpaper_logistic_misclassification_mle", (DL_FUNC) &_JINIpaper_logistic_misclassification_mle, 4},
    {"_JINIpaper_inverse_FIM", (DL_FUNC) &_JINIpaper_inverse_FIM, 4},
    {"_JINIpaper_par_bootstrap_mle", (DL_FUNC) &_JINIpaper_par_bootstrap_mle, 7},
    {"_JINIpaper_nll_max_beta", (DL_FUNC) &_JINIpaper_nll_max_beta, 5},
    {"_JINIpaper_nll_max_alpha", (DL_FUNC) &_JINIpaper_nll_max_alpha, 5},
    {"_JINIpaper_logLike_negbin", (DL_FUNC) &_JINIpaper_logLike_negbin, 5},
    {"_JINIpaper_paretoMle", (DL_FUNC) &_JINIpaper_paretoMle, 6},
    {"_JINIpaper_paretoWmle1", (DL_FUNC) &_JINIpaper_paretoWmle1, 7},
    {"_JINIpaper_r_pareto", (DL_FUNC) &_JINIpaper_r_pareto, 4},
    {"_JINIpaper_roblogisticMqle1", (DL_FUNC) &_JINIpaper_roblogisticMqle1, 7},
    {"_JINIpaper_roblogisticMqle", (DL_FUNC) &_JINIpaper_roblogisticMqle, 7},
    {"_JINIpaper_roblogisticMqleVar", (DL_FUNC) &_JINIpaper_roblogisticMqleVar, 3},
    {"_JINIpaper_roblogisticWmle1", (DL_FUNC) &_JINIpaper_roblogisticWmle1, 7},
    {"_JINIpaper_roblogisticWmle", (DL_FUNC) &_JINIpaper_roblogisticWmle, 7},
    {"_JINIpaper_roblogisticWmleVar", (DL_FUNC) &_JINIpaper_roblogisticWmleVar, 3},
    {"_JINIpaper_r_logistic", (DL_FUNC) &_JINIpaper_r_logistic, 3},
    {"_JINIpaper_IBroblogisticWmle1", (DL_FUNC) &_JINIpaper_IBroblogisticWmle1, 8},
    {"_JINIpaper_StocApproblogisticWmle1", (DL_FUNC) &_JINIpaper_StocApproblogisticWmle1, 8},
    {"_JINIpaper_logistic_wmle", (DL_FUNC) &_JINIpaper_logistic_wmle, 3},
    {"_JINIpaper_logistic_mqle", (DL_FUNC) &_JINIpaper_logistic_mqle, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_JINIpaper(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
